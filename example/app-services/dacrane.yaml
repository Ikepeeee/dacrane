name: quick-start
modules:
- name: image
  module: api-image
  argument:
    tag: latest
- name: container
  module: local-docker
  argument:
    image: ${{ image.api-local-image.image }}
- name: migrate
  module: db-migration
  argument:
    version: v1
    network: ${{ container.net.name }}
    mysql:
      username: root
      password: my-secret-pw
      database: api
      host: ${{ container.db.name }}
---
name: quick-start-as
modules:
- name: qs-base
  module: base
  argument:
    prefix: dacrane
- name: qs-api-image
  module: api-image
  argument:
    tag: latest
    acr: ${{ qs-base.acr }}
- name: qs-app-service
  module: app-service
  argument:
    env: qs
    spec: low
    base: ${{ qs-base }}
    api: ${{ qs-api-image }}
- name: qs-migration
  module: db-migration
  argument:
    version: v1
    mysql:
      username: ${{ qs-app-service.mysql.administrator_login }}@${{ qs-app-service.mysql.name }}
      password: ${{ qs-app-service.mysql.administrator_login_password }}
      host: ${{ qs-app-service.mysql.fqdn }}
      database: ${{ qs-app-service.mysql-database.parameter.database }}
---
name: local-docker
parameter:
  type: object
  default: { image: sample-api, tag: latest }
  properties:
    image:
      type: object
      properties:
        image: { type: string, default: sample-api }
        tag: { type: string, default: latest }
modules:
- module: docker/resource/network
  name: net
  argument:
    name: api-net
- module: docker/resource/container
  name: db
  argument:
    name: db
    image: mysql
    tag: 8.2.0
    network: ${{ net.name }}
    env:
      - name: MYSQL_ROOT_PASSWORD
        value: &password my-secret-pw
      - name: MYSQL_DATABASE
        value: &database api
    healthcheck:
      cmd: "mysqladmin ping -u root -p$MYSQL_ROOT_PASSWORD"
      interval: 30s
      timeout: 5s
      retries: "6"
      start_period: 30s
- module: docker/resource/container
  name: api
  argument:
    name: api
    image: ${{ parameter.image.image }}
    network: ${{ net.name }}
    tag: ${{ parameter.image.tag }}
    port: 3000:3000
    env:
      - name: PORT
        value: "3000"
      - name: MYSQL_HOST
        value: ${{ db.name }}
      - name: MYSQL_USER
        value: root
      - name: MYSQL_PASSWORD
        value: *password
      - name: MYSQL_DATABASE
        value: *database
---
name: db-migration
parameter:
  type: object
  required: ["version"]
  properties:
    version: { type: string }
    network: { type: string }
    mysql:
      type: object
      required: ["username", "password", "host"]
      properties:
        username: { type: string }
        password: { type: string }
        database: { type: string }
        host: { type: string }
modules:
- name: migrate
  module: custom/resource/shell
  argument:
    image: mysql
    tag: 8.2.0
    network: ${{ parameter.network }}
    env: []
    shell: /bin/bash
    create:
      mysql
      -h ${{ parameter.mysql.host }}
      -u ${{ parameter.mysql.username }}
      -p${{ parameter.mysql.password }}
      ${{ parameter.mysql.database }}
      < /work/schemas/${{ parameter.version }}-up.sql
    delete:
      mysql
      -h ${{ parameter.mysql.host }}
      -u ${{ parameter.mysql.username }}
      -p${{ parameter.mysql.password }}
      ${{ parameter.mysql.database }}
      < /work/schemas/${{ parameter.version }}-down.sql
---
name: mysql-database
parameter:
  type: object
  properties:
    database: { type: string }
    mysql:
      type: object
      required: ["username", "password", "host"]
      properties:
        username: { type: string }
        password: { type: string }
        host: { type: string }
modules:
- name: mysql-database
  module: custom/resource/shell
  argument:
    image: mysql
    tag: 8.2.0
    network: ${{ parameter.network }}
    env: []
    shell: /bin/bash
    create:
      echo 'CREATE DATABASE IF NOT EXISTS ${{ parameter.database }};' | mysql
      -h ${{ parameter.mysql.host }}
      -u ${{ parameter.mysql.username }}
      -p${{ parameter.mysql.password }}
    delete:
      echo 'DROP DATABASE IF EXISTS ${{ parameter.database }};' | mysql
      -h ${{ parameter.mysql.host }}
      -u ${{ parameter.mysql.username }}
      -p${{ parameter.mysql.password }}
---
name: api-image
parameter:
  type: object
  properties:
    tag: { type: string, default: "latest" }
    acr: { type: object }
import:
  - ../../module/docker-npm.yaml
  # - import: https://raw.githubusercontent.com/SIOS-Technology-Inc/dacrane/main/module/docker-npm.yaml
modules:
- name: api-local-image
  module: docker-npm
  argument:
    image: sample-api
    tag: ${{ parameter.tag }}
- name: api-remote-image
  if: ${{ parameter.acr != null }}
  module: docker/resource/remote-image
  argument:
    image: ${{ api-local-image.image.image }}
    tag: ${{ api-local-image.image.tag }}
    remote:
      url: ${{ parameter.acr.login_server }}
      user: ${{ parameter.acr.admin_username }}
      password: ${{ parameter.acr.admin_password }}
---
name: app-service
argument:
parameter:
  type: object
  required: ["env", "base", "api"]
  properties:
    env: { type: string, default: "dev" }
    spec: { type: string, enum: ["low", "high"], default: "low" }
    base: { type: object }
    api: { type: object }
modules:
- name: asp
  module: terraform/resource/azurerm_app_service_plan
  argument:
    provider: &azurerm
      features: {}
      client_id: ${{ $env.ARM_CLIENT_ID }}
      client_secret: ${{ $env.ARM_CLIENT_SECRET }}
      tenant_id: ${{ $env.ARM_TENANT_ID }}
      subscription_id: ${{ $env.ARM_SUBSCRIPTION_ID }}
    resource:
      name: ${{ parameter.env }}-${{ parameter.base.parameter.prefix }}-sample-asp
      resource_group_name: ${{ parameter.base.rg.name }}
      location: "Japan East"
      kind: "Linux"
      reserved: true
      sku:
        tier: '${{ {"low": "Basic", "high": "Standard" }[parameter.spec] }}'
        size: '${{ {"low": "B1", "high": "S1" }[parameter.spec] }}'
- name: mysql
  module: terraform/resource/azurerm_mysql_server
  argument:
    provider: *azurerm
    resource:
      name: ${{ parameter.env }}-${{ parameter.base.parameter.prefix }}-sample-mysql
      resource_group_name: ${{ parameter.base.rg.name }}
      location: "Japan East"
      sku_name: "B_Gen5_2"
      version: "8.0"
      administrator_login: mysqladminun
      administrator_login_password: ${{ $env.MYSQL_PASSWORD }}
      ssl_enforcement_enabled: false
      ssl_minimal_tls_version_enforced: TLSEnforcementDisabled
- name: mysql-firewall-role
  module: terraform/resource/azurerm_mysql_firewall_rule
  argument:
    provider: *azurerm
    resource:
      name: ${{ parameter.env }}-${{ parameter.base.parameter.prefix }}-sample-mysql-firewall-allow-all-ip-address
      resource_group_name: ${{ parameter.base.rg.name }}
      server_name: ${{ mysql.name }}
      start_ip_address: 0.0.0.0
      end_ip_address: 255.255.255.255
- name: mysql-database
  module: mysql-database
  depends_on: [mysql-firewall-role]
  argument:
    database: api
    mysql:
      host: ${{ mysql.fqdn }}
      username: mysqladminun@${{ mysql.name }}
      password: ${{ $env.MYSQL_PASSWORD }}
- name: as
  module: terraform/resource/azurerm_app_service
  argument:
    provider: *azurerm
    resource:
      name: ${{ parameter.env }}-${{ parameter.base.parameter.prefix }}-sample-as
      resource_group_name: ${{ parameter.base.rg.name }}
      location: "Japan East"
      app_service_plan_id: ${{ asp.id }}
      site_config:
        linux_fx_version: DOCKER|${{ parameter.base.acr.login_server }}/sample-api:${{ parameter.api.api-remote-image.tag }}
      app_settings:
        DOCKER_REGISTRY_SERVER_URL: ${{ parameter.base.acr.login_server }}
        DOCKER_REGISTRY_SERVER_USERNAME: ${{ parameter.base.acr.admin_username }}
        DOCKER_REGISTRY_SERVER_PASSWORD: ${{ parameter.base.acr.admin_password }}
        WEBSITES_PORT: "3000"
        MYSQL_HOST: ${{ mysql.fqdn }}
        MYSQL_DATABASE: api
        MYSQL_USER: mysqladminun@${{ mysql.name }}
        MYSQL_PASSWORD: ${{ $env.MYSQL_PASSWORD }}
---
name: base
parameter:
  type: object
  required: ["prefix"]
  properties:
    prefix: { type: string }
modules:
- name: rg
  module: terraform/resource/azurerm_resource_group
  argument:
    provider: &azurerm
      features: {}
      client_id: ${{ $env.ARM_CLIENT_ID }}
      client_secret: ${{ $env.ARM_CLIENT_SECRET }}
      tenant_id: ${{ $env.ARM_TENANT_ID }}
      subscription_id: ${{ $env.ARM_SUBSCRIPTION_ID }}
    resource:
      name: ${{ parameter.prefix }}-sample-rg
      location: "Japan East"
- name: acr
  module: terraform/resource/azurerm_container_registry
  argument:
    provider: *azurerm
    resource:
      name: ${{ parameter.prefix }}sampleacr
      resource_group_name: ${{ rg.name }}
      location: "Japan East"
      sku: Basic
      admin_enabled: true
