name: quick-start
modules:
  - name: image
    module: api-image
    argument:
      tag: latest
  - name: container
    module: local-docker
    argument:
      image: ${{ modules.image.modules.api-local-image.modules.image }}
---
name: quick-start-as
modules:
  - name: qs-base
    module: base
    argument:
      prefix: dacrane
  - name: qs-api-image
    module: api-image
    argument:
      tag: latest
      acr: ${{ modules.qs-base.modules.acr }}
  - name: qs-app-service
    module: app-service
    argument:
      env: qs
      spec: low
      base: ${{ modules.qs-base }}
      api: ${{ modules.qs-api-image }}
---
name: local-docker
parameter:
  type: object
  default: { image: sample-api, tag: latest }
  properties:
    image:
      type: object
      properties:
        image: { type: string, default: sample-api }
        tag: { type: string, default: latest }
modules:
  - module: resource/docker-container
    name: docker
    argument:
      name: api
      image: ${{ parameter.image.image }}
      tag: ${{ parameter.image.tag }}
      port: 3000:3000
      env:
        - name: PORT
          value: "3000"
---
name: api-image
parameter:
  type: object
  properties:
    tag: { type: string, default: "latest" }
    acr: { type: object }
import:
  - ../../module/docker-npm.yaml
  # - import: https://raw.githubusercontent.com/SIOS-Technology-Inc/dacrane/main/module/docker-npm.yaml
modules:
  - name: api-local-image
    module: docker-npm
    argument:
      image: sample-api
      tag: ${{ parameter.tag }}
  - name: api-remote-image
    if: ${{ parameter.acr != null }}
    module: resource/docker-remote-image
    argument:
      image: ${{ modules.api-local-image.modules.image.image }}
      tag: ${{ modules.api-local-image.modules.image.tag }}
      remote:
        url: ${{ parameter.acr.login_server }}
        user: ${{ parameter.acr.admin_username }}
        password: ${{ parameter.acr.admin_password }}
---
name: aks
argument:
parameter:
  type: object
  required: ["base"]
  properties:
    env: { type: string, default: "dev" }
    spec: { type: string, enum: ["low", "high"], default: "low" }
    base: { type: object }
    api: { type: object }
modules:
  - name: aks-cluster
    module: resource/terraform
    argument:
      provider: azurerm
      resource: azurerm_kubernetes_cluster
      configurations: { features: {} }
      argument:
        name: test-aks-cluster
        location: "Japan East"
        resource_group_name: ${{ parameter.base.modules.rg.name }}
        dns_prefix: exampleaks1
        default_node_pool:
          name: default
          node_count: 1
          vm_size: Standard_D2_v2
        identity:
          type: SystemAssigned
  - name: aks-development
    module: resource/terraform
    argument:
      provider: kubernetes
      resource: kubernetes_deployment_v1
      configurations:
        host: ${{ modules.aks-cluster.kube_config[0].host }}
        client_certificate: base64decode(${{ modules.aks-cluster.kube_config[0].client_certificate }})
        client_key: base64decode(${{ modules.aks-cluster.kube_config[0].client_key }})
        cluster_ca_certificate: base64decode(${{ modules.aks-cluster.kube_config[0].cluster_ca_certificate }})
      argument:
        metadata:
          name: terraform-example
          labels:
            test: MyExampleApp
        spec:
          replicas: 3
          selector:
            match_labels:
              test: MyExampleApp
          template:
            metadata:
              labels:
                test: MyExampleApp
            spec:
              containers:
                - image: ${{ parameter.base.modules.acr.login_server }}/sample-api:${{ parameter.api.modules.api-remote-image.tag }}
                  name: example
                  resources:
                    limits:
                      cpu: 0.5
                      memory: 512Mi
                    requests:
                      cpu: 250m
                      memory: 50Mi
              liveness_probe:
                http_get:
                  path: /
                  port: 80
                  http_headers:
                    - name: X-Custom-Header
                      value: Awesome
                initial_delay_seconds: 3
                period_seconds: 3

  # - name: aks-service
  #   module: resource/terraform
  #   argument:
  #     provider: kubernetes
  #     resource: kubernetes_deployment_v1
  #     argument:
  #       metadata:
  #         name: example-service
  #       spec:
  #         selector:
  #           App: MyApp
  #         port:
  #           port: 80
  #           target_port: 80
  #         type: LoadBalancer
---
name: base
parameter:
  type: object
  required: ["prefix"]
  properties:
    prefix: { type: string }
modules:
  - name: rg
    module: resource/terraform
    argument:
      provider: azurerm
      resource: azurerm_resource_group
      configurations: { features: {} }
      argument:
        name: ${{ parameter.prefix }}-sample-rg
        location: "Japan East"
  - name: acr
    module: resource/terraform
    argument:
      provider: azurerm
      resource: azurerm_container_registry
      configurations: { features: {} }
      argument:
        name: ${{ parameter.prefix }}sampleacr
        resource_group_name: ${{ modules.rg.name }}
        location: "Japan East"
        sku: Basic
        admin_enabled: true
