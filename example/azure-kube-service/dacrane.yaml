name: quick-start
modules:
  - name: image
    module: api-image
    argument:
      tag: latest
  - name: container
    module: local-docker
    argument:
      image: ${{ modules.image.modules.api-local-image.modules.image }}
---
name: quick-start-aks
modules:
  - name: qs-base
    module: base
    argument:
      prefix: dacrane
  - name: qs-api-image
    module: api-image
    argument:
      tag: latest
      acr: ${{ modules.qs-base.modules.acr }}
  - name: qs-aks
    module: aks
    argument:
      env: qs
      spec: low
      base: ${{ modules.qs-base }}
      api: ${{ modules.qs-api-image }}
---
name: local-docker
parameter:
  type: object
  default: { image: sample-api, tag: latest }
  properties:
    image:
      type: object
      properties:
        image: { type: string, default: sample-api }
        tag: { type: string, default: latest }
modules:
  - module: docker/resource/container
    name: docker
    argument:
      name: api
      image: ${{ parameter.image.image }}
      tag: ${{ parameter.image.tag }}
      port: 3000:3000
      env:
        - name: PORT
          value: "3000"
---
name: api-image
parameter:
  type: object
  properties:
    tag: { type: string, default: "latest" }
    acr: { type: object }
import:
  - ../../module/docker-npm.yaml
  # - import: https://raw.githubusercontent.com/SIOS-Technology-Inc/dacrane/main/module/docker-npm.yaml
modules:
  - name: api-local-image
    module: docker-npm
    argument:
      image: sample-api
      tag: ${{ parameter.tag }}
  - name: api-remote-image
    if: ${{ parameter.acr != null }}
    module: docker/resource/remote-image
    argument:
      image: ${{ modules.api-local-image.modules.image.image }}
      tag: ${{ modules.api-local-image.modules.image.tag }}
      remote:
        url: ${{ parameter.acr.login_server }}
        user: ${{ parameter.acr.admin_username }}
        password: ${{ parameter.acr.admin_password }}
---
name: aks
argument:
parameter:
  type: object
  required: ["base"]
  properties:
    env: { type: string, default: "dev" }
    base: { type: object }
    api: { type: object }
modules:
  - name: aks-cluster
    module: terraform/resource/azurerm_kubernetes_cluster
    argument:
      provider: &azurerm
        features: {}
        client_id: ${{ env.ARM_CLIENT_ID }}
        client_secret: ${{ env.ARM_CLIENT_SECRET }}
        tenant_id: ${{ env.ARM_TENANT_ID }}
        subscription_id: ${{ env.ARM_SUBSCRIPTION_ID }}
      resource:
        name: ${{ parameter.env }}-${{ parameter.base.parameter.prefix }}-sample-aks
        location: "Japan East"
        resource_group_name: ${{ parameter.base.modules.rg.name }}
        dns_prefix: exampleaks1
        default_node_pool:
          name: default
          node_count: 1
          vm_size: Standard_D2_v2
        identity:
          type: SystemAssigned
  - name: role-assignment
    module: terraform/resource/azurerm_role_assignment
    argument:
      provider: *azurerm
      resource:
        principal_id: ${{ modules.aks-cluster.kubelet_identity[0].object_id }}
        role_definition_name: "AcrPull"
        scope: ${{ parameter.base.modules.acr.id }}
        skip_service_principal_aad_check: true
  - name: aks-development
    module: terraform/resource/kubernetes_deployment_v1
    depends_on: [role-assignment]
    argument:
      provider: &kubernetes
        host: ${{ modules.aks-cluster.kube_config[0].host }}
        client_certificate: ${base64decode("${{ modules.aks-cluster.kube_config[0].client_certificate }}")}
        client_key: ${base64decode("${{ modules.aks-cluster.kube_config[0].client_key }}")}
        cluster_ca_certificate: ${base64decode("${{ modules.aks-cluster.kube_config[0].cluster_ca_certificate }}")}
      resource:
        metadata:
          name: sample-api
        spec:
          replicas: 2
          selector:
            match_labels:
              run: sample-api
          template:
            metadata:
              labels:
                run: sample-api
            spec:
              container:
                - name: sample-api
                  image: ${{ parameter.base.modules.acr.login_server }}/sample-api:${{ parameter.api.modules.api-remote-image.tag }}
                  port:
                    - container_port: 3000
  - name: aks-service
    module: terraform/resource/kubernetes_service_v1
    argument:
      provider: *kubernetes
      resource:
        metadata:
          name: public-svc
          annotations:
            service.beta.kubernetes.io/azure-dns-label-name: ${{ parameter.env }}-${{ parameter.base.parameter.prefix }}
        spec:
          type: LoadBalancer
          port:
          - protocol: TCP
            port: 80
            target_port: 3000
          selector:
            run: sample-api
        wait_for_load_balancer: true
---
name: base
parameter:
  type: object
  required: ["prefix"]
  properties:
    prefix: { type: string }
modules:
  - name: rg
    module: terraform/resource/azurerm_resource_group
    argument:
      provider: &azurerm
        features: {}
        client_id: ${{ env.ARM_CLIENT_ID }}
        client_secret: ${{ env.ARM_CLIENT_SECRET }}
        tenant_id: ${{ env.ARM_TENANT_ID }}
        subscription_id: ${{ env.ARM_SUBSCRIPTION_ID }}
      resource:
        name: ${{ parameter.prefix }}-sample-rg
        location: "Japan East"
  - name: acr
    module: terraform/resource/azurerm_container_registry
    argument:
      provider: *azurerm
      resource:
        name: ${{ parameter.prefix }}sampleacr
        resource_group_name: ${{ modules.rg.name }}
        location: "Japan East"
        sku: Basic
        admin_enabled: true
